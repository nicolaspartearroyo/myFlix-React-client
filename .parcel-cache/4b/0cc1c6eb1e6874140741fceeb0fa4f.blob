"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
var _contains = _interopRequireDefault(require("dom-helpers/contains"));
var _react = _interopRequireWildcard(require("react"));
var _useTimeout = _interopRequireDefault(require("@restart/hooks/useTimeout"));
var _safeFindDOMNode = _interopRequireDefault(require("react-overlays/safeFindDOMNode"));
var _warning = _interopRequireDefault(require("warning"));
var _uncontrollable = require("uncontrollable");
var _Overlay = _interopRequireDefault(require("./Overlay"));
var _excluded = [
    "trigger",
    "overlay",
    "children",
    "popperConfig",
    "show",
    "defaultShow",
    "onToggle",
    "delay",
    "placement",
    "flip"
];
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache1(nodeInterop1) {
        return nodeInterop1 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var RefHolder1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose2.default(RefHolder2, _React$Component);
    function RefHolder2() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = RefHolder2.prototype;
    _proto.render = function render() {
        return this.props.children;
    };
    return RefHolder2;
}(_react.default.Component);
function normalizeDelay(delay) {
    return delay && typeof delay === 'object' ? delay : {
        show: delay,
        hide: delay
    };
} // Simple implementation of mouseEnter and mouseLeave.
// React's built version is broken: https://github.com/facebook/react/issues/4251
// for cases when the trigger is disabled and mouseOut/Over can cause flicker
// moving from one child element to another.
function handleMouseOverOut(handler, args, relatedNative) {
    var e = args[0];
    var target = e.currentTarget;
    var related = e.relatedTarget || e.nativeEvent[relatedNative];
    if ((!related || related !== target) && !_contains.default(target, related)) handler.apply(void 0, args);
}
var defaultProps = {
    defaultShow: false,
    trigger: [
        'hover',
        'focus'
    ]
};
function OverlayTrigger(_ref) {
    var trigger = _ref.trigger, overlay = _ref.overlay, children = _ref.children, _ref$popperConfig = _ref.popperConfig, popperConfig = _ref$popperConfig === void 0 ? {
    } : _ref$popperConfig, propsShow = _ref.show, _ref$defaultShow = _ref.defaultShow, defaultShow = _ref$defaultShow === void 0 ? false : _ref$defaultShow, onToggle = _ref.onToggle, propsDelay = _ref.delay, placement = _ref.placement, _ref$flip = _ref.flip, flip = _ref$flip === void 0 ? placement && placement.indexOf('auto') !== -1 : _ref$flip, props = _objectWithoutPropertiesLoose2.default(_ref, _excluded);
    var triggerNodeRef = _react.useRef(null);
    var timeout = _useTimeout.default();
    var hoverStateRef = _react.useRef('');
    var _useUncontrolledProp = _uncontrollable.useUncontrolledProp(propsShow, defaultShow, onToggle), show = _useUncontrolledProp[0], setShow = _useUncontrolledProp[1];
    var delay = normalizeDelay(propsDelay);
    var _ref2 = typeof children !== 'function' ? _react.default.Children.only(children).props : {
    }, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick;
    var getTarget = _react.useCallback(function() {
        return _safeFindDOMNode.default(triggerNodeRef.current);
    }, []);
    var handleShow = _react.useCallback(function() {
        timeout.clear();
        hoverStateRef.current = 'show';
        if (!delay.show) {
            setShow(true);
            return;
        }
        timeout.set(function() {
            if (hoverStateRef.current === 'show') setShow(true);
        }, delay.show);
    }, [
        delay.show,
        setShow,
        timeout
    ]);
    var handleHide = _react.useCallback(function() {
        timeout.clear();
        hoverStateRef.current = 'hide';
        if (!delay.hide) {
            setShow(false);
            return;
        }
        timeout.set(function() {
            if (hoverStateRef.current === 'hide') setShow(false);
        }, delay.hide);
    }, [
        delay.hide,
        setShow,
        timeout
    ]);
    var handleFocus = _react.useCallback(function() {
        handleShow();
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        onFocus == null || onFocus.apply(void 0, args);
    }, [
        handleShow,
        onFocus
    ]);
    var handleBlur = _react.useCallback(function() {
        handleHide();
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        onBlur == null || onBlur.apply(void 0, args);
    }, [
        handleHide,
        onBlur
    ]);
    var handleClick = _react.useCallback(function() {
        setShow(!show);
        if (onClick) onClick.apply(void 0, arguments);
    }, [
        onClick,
        setShow,
        show
    ]);
    var handleMouseOver = _react.useCallback(function() {
        for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)args[_key3] = arguments[_key3];
        handleMouseOverOut(handleShow, args, 'fromElement');
    }, [
        handleShow
    ]);
    var handleMouseOut = _react.useCallback(function() {
        for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)args[_key4] = arguments[_key4];
        handleMouseOverOut(handleHide, args, 'toElement');
    }, [
        handleHide
    ]);
    var triggers = trigger == null ? [] : [].concat(trigger);
    var triggerProps = {
    };
    if (triggers.indexOf('click') !== -1) triggerProps.onClick = handleClick;
    if (triggers.indexOf('focus') !== -1) {
        triggerProps.onFocus = handleFocus;
        triggerProps.onBlur = handleBlur;
    }
    if (triggers.indexOf('hover') !== -1) {
        _warning.default(triggers.length > 1, '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibility of the overlay to just mouse users. Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.');
        triggerProps.onMouseOver = handleMouseOver;
        triggerProps.onMouseOut = handleMouseOut;
    }
    return(/*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, typeof children === 'function' ? children(_extends2.default({
    }, triggerProps, {
        ref: triggerNodeRef
    })) : /*#__PURE__*/ _react.default.createElement(RefHolder1, {
        ref: triggerNodeRef
    }, /*#__PURE__*/ _react.cloneElement(children, triggerProps)), /*#__PURE__*/ _react.default.createElement(_Overlay.default, _extends2.default({
    }, props, {
        show: show,
        onHide: handleHide,
        flip: flip,
        placement: placement,
        popperConfig: popperConfig,
        target: getTarget
    }), overlay)));
}
OverlayTrigger.defaultProps = defaultProps;
var _default = OverlayTrigger;
exports.default = _default;
module.exports = exports["default"];
